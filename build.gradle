import org.gosulang.gradle.build.VersionWriterTask

import java.nio.charset.StandardCharsets

plugins {
    id 'net.researchgate.release' version '2.7.0'
    id 'com.gradle.plugin-publish' version '0.9.10'
    id 'maven-publish'
    id 'groovy'
    id 'java-gradle-plugin'
}

wrapper {
    gradleVersion '4.7'
}

group = 'org.gosu-lang.gosu'
description = """Gosu language compiler for Gradle.  Built with Gradle $project.gradle.gradleVersion.

This has also been tested extensively with Gradle version(s): $project.testedVersions

** Gradle versions below 2.12 are no longer supported **

Projects applying this plugin require a compile-time dependency on the gosu-core-api library.  

This version requires Gosu 1.13.9 or greater, or 1.14.2 or greater. 

Please include this in the depencencies closure:

dependencies {
    compile group: 'org.gosu-lang.gosu', name: 'gosu-core-api', version: '$project.gosuVersion'
}
"""

final boolean isSnapshot = project.version.endsWith('-SNAPSHOT')

repositories {
    mavenLocal()
    maven {
        url 'https://oss.jfrog.org/artifactory/libs-snapshot' //for Gosu snapshot builds
    }
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots/' //for Gosu snapshot builds
    }
	jcenter()
}

dependencies {
    testCompile 'junit:junit:4.12'
    testCompile 'org.easytesting:fest-assert:1.3'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile 'org.spockframework:spock-core:1.0-groovy-2.4@jar'
}

gradlePlugin {
    plugins {
        gosuPlugin {
            id = 'org.gosu-lang.gosu'
            implementationClass = 'org.gosulang.gradle.GosuPlugin'
        }
    }
}

pluginBundle {
    website = 'http://gosu-lang.org'
    vcsUrl = 'https://github.com/gosu-lang/gradle-gosu-plugin'
    description = project.description
    tags = ['gosu']

    plugins {
        gosuPlugin {
            id = 'org.gosu-lang.gosu'
            displayName = 'Gosu Gradle Plugin'
        }
    }
}

task gradleVersionHelper(type: VersionWriterTask) {
    propertyToRead = 'gradleVersion'
    fallbackValue = project.gradle.gradleVersion
}

task gosuVersionHelper(type: VersionWriterTask) {
    propertyToRead = 'gosuVersion'
}

task testedVersionsHelper(type: VersionWriterTask) {
    propertyToRead = 'testedVersions'
}

dependencies {
    testRuntime files(gradleVersionHelper) // Persist a file containing the gradleVersion
    testRuntime files(gosuVersionHelper) // Persist a file containing the gosuVersion
    testRuntime files(testedVersionsHelper) // Persist a file containing the testedVersions
}

test {
  testLogging {
      events 'passed', 'failed', 'skipped'
  }
  environment('JAVA_TOOL_OPTIONS', '-Duser.language=en')
}

tasks.withType(AbstractCompile) {
    options.with {
        compilerArgs += ['-Xlint:unchecked']
        deprecation = true
        encoding = StandardCharsets.UTF_8
    }
}

//constrain memory usage when running on CI server
if(System.getenv('CI') != null) {
    tasks.withType(AbstractCompile) { //covers JavaCompile and GroovyCompile
        options.fork = false
    }
    test {
        maxHeapSize = '1g'
        systemProperty 'org.gradle.testkit.debug', 'true' // prevents the testkit from spawning daemons and running out of memory
    }
}

task sourceJar(type: Jar) {
    classifier = 'sources'
    description 'generate sources'
    from sourceSets.main.allJava
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    description 'generate javadoc'
    from javadoc
}

release {
    tagTemplate = 'v${version}'
    git {
        requireBranch = 'rel/.*'
    }
}

afterReleaseBuild.dependsOn publish, publishPlugins

publishing {
    publications.maybeCreate('pluginMaven', MavenPublication).with {
            artifact javadocJar
            artifact sourceJar
            pom.packaging 'jar'
            pom.withXml { xml ->
                xml.asNode().appendNode('name', project.name)
                xml.asNode().appendNode('description', project.description)
                xml.asNode().appendNode('url', 'http://gosu-lang.github.io/')

                xml.asNode().appendNode('scm').with {
                    appendNode('connection', 'scm:git:git@github.com:gosu-lang/gosu-lang.git')
                    appendNode('developerConnection', 'scm:git:git@github.com:gosu-lang/gosu-lang.git')
                    appendNode('url', 'git@github.com:gosu-lang/gosu-lang.git')
                }

                xml.asNode().appendNode('licenses')
                    .appendNode('license').with {
                        appendNode('name', 'The Apache License, Version 2.0')
                        appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
                    }

                xml.asNode().appendNode('developers').with {
                    appendNode('developer').with {
                        appendNode('name', 'Kyle Moore')
                        appendNode('email', 'github@kylemoore.com')
                        appendNode('organization', 'gosu-lang.org')
                    }
                    appendNode('developer').with {
                        appendNode('name', 'The Gosu Team')
                        appendNode('email', 'gosu.lang.team@gmail.com')
                        appendNode('organization', 'Guidewire')
                    }
                }
            }
        }

    repositories {
        maven {
            url isSnapshot ? 'https://oss.jfrog.org/artifactory/oss-snapshot-local'
                           : 'https://api.bintray.com/maven/gosu-lang/gosu-lang/gradle-gosu-plugin/;publish=1'
            credentials {
                username System.getenv('BINTRAY_USER')
                password System.getenv('BINTRAY_API_KEY')
            }
        }
    }
}

// the gradle plugin portal isn't compatible with SNAPSHOT versions
// https://discuss.gradle.org/t/uploading-snapshot-versions-to-the-plugin-portal/11347
if (isSnapshot) {
    publishPlugins.enabled = false

}
