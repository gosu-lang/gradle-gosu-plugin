import org.gosulang.gradle.build.VersionWriterTask
import java.nio.charset.StandardCharsets

plugins {
    id 'com.gradle.plugin-publish' version "${gradlePublishPluginVersion}"
    id 'net.researchgate.release' version "${researchgateReleaseGradlePluginVersion}"
    id 'groovy'
    id 'java-gradle-plugin'
    id 'maven-publish'
}

wrapper {
    distributionType = Wrapper.DistributionType.BIN // or .ALL
}

description = """Gosu language compiler for Gradle.  Built with Gradle $gradleVersion.

This has also been tested with Gradle version(s): $project.testedVersions

Projects applying this plugin require a compile-time dependency on the gosu-core-api library.  

This version requires $gosuVersion or greater. 

Please include this in the dependencies closure:

dependencies {
    implementation group: 'org.gosu-lang.gosu', name: 'gosu-core-api', version: '$project.gosuVersion'
}
"""

final boolean isSnapshot = project.version.endsWith('-SNAPSHOT')
boolean publishSnapshotToGwArtifactory = project.hasProperty('publishSnapshotToGwArtifactory')

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots/' //for Gosu snapshot builds
    }
}

dependencies {
    testImplementation platform("org.junit:junit-bom:${junitPlatformVersion}")
    testImplementation "org.junit.jupiter:junit-jupiter"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine"
    testImplementation "junit:junit:${junitVersion}" //TODO refactor existing unit tests and get rid of junit 4
    testImplementation "org.hamcrest:hamcrest-library:${hamcrestLibraryVersion}"
    testImplementation "org.spockframework:spock-core:${spockCoreVersion}"
    testImplementation "org.assertj:assertj-core:${assertjCoreVersion}"
    testImplementation "org.opentest4j:opentest4j:${opentest4jVersion}"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of javaVersion
    }
    withSourcesJar()
    withJavadocJar()
}

gradlePlugin {
    plugins {
        gosuPlugin {
            id = 'org.gosu-lang.gosu'
            implementationClass = 'org.gosulang.gradle.GosuPlugin'
        }
    }
}

//Test Helper Tasks
tasks.register('gradleVersionHelper', VersionWriterTask) {
    propertyToRead = 'gradleVersion'
    fallbackValue = project.gradle.gradleVersion
}

tasks.register('gosuVersionHelper', VersionWriterTask) {
    propertyToRead = 'gosuVersion'
}

tasks.register('testedVersionsHelper', VersionWriterTask) {
    propertyToRead = 'testedVersions'
}

dependencies {
    testImplementation files(gradleVersionHelper) // Persist a file containing the gradleVersion
    testImplementation files(gosuVersionHelper) // Persist a file containing the gosuVersion
    testImplementation files(testedVersionsHelper) // Persist a file containing the testedVersions
}

test {
  useJUnitPlatform()
  testLogging {
      events 'passed', 'failed', 'skipped'
  }
  environment('JAVA_TOOL_OPTIONS', '-Duser.language=en')
}

tasks.withType(AbstractCompile).configureEach {
    options.with {
        compilerArgs += ['-Xlint:unchecked']
        deprecation = true
        encoding = StandardCharsets.UTF_8
    }
}

//constrain memory usage when running on CI server
if(System.getenv('CI') != null) {
    tasks.withType(AbstractCompile).configureEach { //covers JavaCompile and GroovyCompile
        options.fork = false
    }
    test {
        maxHeapSize = '1g'
        systemProperty 'org.gradle.testkit.debug', 'true' // prevents the testkit from spawning daemons and running out of memory
    }
}

release {
    git {
        requireBranch.set('rel/.*')
    }
    tagTemplate = 'v${version}'
}

pluginBundle {
    website = 'http://gosu-lang.org'
    vcsUrl = 'https://github.com/gosu-lang/gradle-gosu-plugin'
    description = project.description
    tags = ['gosu']
    plugins {
        gosuPlugin {
            id = 'org.gosu-lang.gosu'
            displayName = 'Gosu Gradle Plugin'
        }
    }
}

afterReleaseBuild.dependsOn publish, publishPlugins
afterEvaluate {
    tasks.named("generateMetadataFileForPluginMavenPublication") {
        dependsOn("publishPluginJar")
        dependsOn("publishPluginJavaDocsJar")
    }
}

publishing {
    publications.maybeCreate('pluginMaven', MavenPublication).with {
        pom.packaging 'jar'
        pom.withXml { xml -> configurePom(xml) }
    }
    if (publishSnapshotToGwArtifactory){
        repositories {
            maven {
                if(isSnapshot) {
                    url System.getenv('PUBLISH_TO_REPOSITORY_URL')
                    credentials {
                        username System.getenv('PUBLISH_WITH_USERNAME')
                        password System.getenv('PUBLISH_WITH_PASSWORD')
                    } 
                }
            }
        }
    }    
}

model {
    tasks.generatePomFileForGosuPluginPluginMarkerMavenPublication {
        pom.withXml { xml -> configurePom(xml) }
    }
}

void configurePom(XmlProvider xml) {
    xml.asNode().appendNode('name', project.name)
    xml.asNode().appendNode('description', project.description)
    xml.asNode().appendNode('url', 'http://gosu-lang.github.io/')

    xml.asNode().appendNode('scm').with {
        appendNode('connection', 'scm:git:git@github.com:gosu-lang/gosu-lang.git')
        appendNode('developerConnection', 'scm:git:git@github.com:gosu-lang/gosu-lang.git')
        appendNode('url', 'git@github.com:gosu-lang/gosu-lang.git')
    }

    xml.asNode().appendNode('licenses')
            .appendNode('license').with {
        appendNode('name', 'The Apache License, Version 2.0')
        appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
    }

    xml.asNode().appendNode('developers').with {
        appendNode('developer').with {
            appendNode('name', 'Kyle Moore')
            appendNode('email', 'github@kylemoore.com')
            appendNode('organization', 'gosu-lang.org')
        }
        appendNode('developer').with {
            appendNode('name', 'The Gosu Team')
            appendNode('email', 'gosu.lang.team@gmail.com')
            appendNode('organization', 'Guidewire')
        }
    }
}
