plugins {
    id 'com.gradle.plugin-publish' version '0.9.1'
    id 'maven'
    id 'signing'
    id 'java'
    id 'groovy'
}

group = 'org.gosu-lang.gosu'
version = project.pluginVersion
description = 'Gosu language compiler for Gradle.  The plugin bundles Gosu version ' + project.gosuVersion

def isSnapshot = project.version.endsWith('-SNAPSHOT')

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	jcenter()
    //for Gosu snapshot builds:
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
}

dependencies {
    compile     gradleApi()
    compile     group: 'org.gosu-lang.gosu', name: 'gosu-core-api', version: project.gosuVersion
    compile     group: 'org.gosu-lang.gosu', name: 'gosu-core', version: project.gosuVersion // compilation will require this jar at compile-time, not runtime
    testCompile group: 'junit', name: 'junit', version: project.junitVersion
    testCompile group: 'org.hamcrest', name: 'hamcrest-library', version: '1.3'
    testCompile gradleTestKit()
    testCompile 'org.spockframework:spock-core:0.7-groovy-2.0@jar'
    runtime     group: 'org.codehaus.plexus', name: 'plexus-utils', version: '3.0.22'
}

pluginBundle {
    website = 'http://gosu-lang.org'
    vcsUrl = 'https://github.com/gosu-lang/gradle-gosu-plugin'
    description = project.description
    tags = ['gosu']

    plugins {
        gosuPlugin {
            id = 'org.gosu-lang.gosu'
            displayName = 'Gosu Gradle Plugin'
        }
    }
}

// Write the plugin's classpath to a file to share with the tests: build/createClasspathManifest/plugin-classpath.txt
task createClasspathManifest {
    def outputDir = file("$buildDir/$name")

    inputs.files sourceSets.main.runtimeClasspath
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join('\n')
    }
}

task gosuVersionHelper {
    def outputDir = file("$buildDir/$name")

    def propsFile = new File(project.rootDir, 'gradle.properties')

    inputs.files propsFile
    outputs.dir outputDir

    doLast {
        outputDir.mkdir()
        def props = new Properties()
        props.load(new BufferedReader(new FileReader(propsFile)))
        file("$outputDir/gosuVersion.txt").text = props.getProperty('gosuVersion')
    }
}

dependencies {
    testRuntime files(createClasspathManifest) // Add the classpath file to the test runtime classpath
    testRuntime files(gosuVersionHelper) // Persist a file containing the gosuVersion
}

task sourceJar(type: Jar) {
    description 'generate sources'
    classifier = 'sources'
    from sourceSets.main.allJava
}

task javadocJar(type: Jar) {
    description 'generate javadoc'
    classifier = 'javadoc'
    from javadoc
}

artifacts {
    archives sourceJar, javadocJar
}

/**
 * Only execute for release builds, which must be done locally.
 * Store keyId, password, secretKeyRingFile in ~/.gradle/gradle.properties
 */
signing {
    required { !isSnapshot && gradle.taskGraph.hasTask('uploadArchives') }
    sign configurations.archives
}

/* from 'maven' plugin */
uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> if(!isSnapshot) { signing.signPom(deployment) } }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: System.env.ossrhUsername, password: System.env.ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: System.env.ossrhUsername, password: System.env.ossrhPassword)
            }

            pom.project {
                name project.name
                packaging 'jar'
                description project.description
                url 'http://gosu-lang.github.io/'

                scm {
                    connection 'scm:git:git@github.com:gosu-lang/gosu-lang.git'
                    developerConnection 'scm:git:git@github.com:gosu-lang/gosu-lang.git'
                    url 'git@github.com:gosu-lang/gosu-lang.git'
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        name 'The Gosu Team'
                        email 'gosu.lang.team@gmail.com'
                        organization 'Guidewire'
                    }
                }
            }
        }
    }
}

/**
 * Fetches the publishing credentials from the build machine's env vars
 * Necessitated by https://issues.gradle.org/browse/GRADLE-3281
 */
task setupPluginUpload {

    onlyIf {
        !isSnapshot
    }

    doLast {
        String key = System.env.gradlePublishKey
        String secret = System.env.gradlePublishSecret

        if( !key || !secret ) {
            throw new RuntimeException('gradlePublishKey and/or gradlePublishSecret are not defined environment variables')
        }

        System.properties.setProperty('gradle.publish.key', key)
        System.properties.setProperty('gradle.publish.secret', secret)
    }

}

tasks.publishPlugins.dependsOn tasks.setupPluginUpload

// the gradle plugin portal isn't really compatible with SNAPSHOT versions
// https://discuss.gradle.org/t/uploading-snapshot-versions-to-the-plugin-portal/11347
if (isSnapshot) {
    signArchives.enabled = false
    publishPlugins.enabled = false
}